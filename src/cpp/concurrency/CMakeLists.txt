project(CppConcurrencyInAction)
cmake_minimum_required(VERSION 3.2)

set (FMT_INCLUDE_DIR "c:/sw/fmt-9.1.0/include/")
if (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    add_compile_options( /std:c++20 /wd4514 /wd5219 /wd4244 /wd5045)

    # fmt library 
    set (FMT_LIB_DIR "c:/sw/fmt-9.1.0/lib/msvc/")
    list(APPEND LIBS fmtd)
else()
    add_compile_options(-Wall -Wextra -Wpedantic -std=c++20)

    # fmt library
    set (FMT_LIB_DIR "c:/sw/fmt-9.1.0/lib/mingw")
    list(APPEND LIBS fmt)
endif()

include_directories(${FMT_INCLUDE_DIR})
link_directories(${FMT_LIB_DIR})

add_executable(hello_world hello_world.cpp)
add_executable(background_task background_task.cpp)
add_executable(pass_reference pass_reference.cpp)
add_executable(thread_guard thread_guard.cpp)
add_executable(parallel_accumulate parallel_accumulate.cpp)
add_executable(list_mutex list_mutex.cpp)
add_executable(cancel_thread cancel_thread.cpp)
add_executable(dns_cache dns_cache.cpp)
add_executable(cond_var cond_var.cpp)
add_executable(cond_var2 cond_var2.cpp)
add_executable(condvar2 condvar2.cpp)

add_executable(queue queue.cpp)
add_executable(async_task async_task.cpp)
add_executable(package package.cpp)
add_executable(dot_product_async dot_product_async.cpp)
add_executable(package2 package2.cpp)
add_executable(latch latch.cpp)

target_link_libraries(hello_world ${LIBS})
target_link_libraries(background_task ${LIBS})
target_link_libraries(pass_reference ${LIBS})
target_link_libraries(thread_guard ${LIBS})
target_link_libraries(parallel_accumulate ${LIBS})
target_link_libraries(list_mutex ${LIBS})
target_link_libraries(cancel_thread ${LIBS})
target_link_libraries(dns_cache ${LIBS})
target_link_libraries(cond_var ${LIBS})
target_link_libraries(cond_var2 ${LIBS})
target_link_libraries(condvar2 ${LIBS})
target_link_libraries(queue ${LIBS})
target_link_libraries(async_task ${LIBS})
target_link_libraries(package ${LIBS})
target_link_libraries(dot_product_async ${LIBS})
target_link_libraries(package2 ${LIBS})
target_link_libraries(latch ${LIBS})
