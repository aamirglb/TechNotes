#!/usr/bin/env python3

# Script to plot smartlink logs and save them as PNG file
import os
import csv
import sys
from typing import List
from datetime import datetime
import matplotlib.pyplot as plt
from matplotlib.dates import DateFormatter
import numpy as np
from reportlab.pdfbase.pdfmetrics import stringWidth

from reportlab.pdfgen import canvas
from reportlab.lib import colors
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import inch


def parse_files():
    '''Parse the CSV file and generate plots'''

    global flight_date
    global images

    for i in range(1, len(sys.argv)):
        sys_id = sys.argv[i].split('_')[1]
        sys_id = int(sys_id[2:])
        print('Parsing file {}. SYS_ID: {}'.format(sys.argv[i], sys_id))

        dt = []
        cpu_temp = []
        cpu_load = []
        mem_used = []

        with open(sys.argv[i]) as csv_file:
            csv_reader = csv.reader(csv_file, delimiter=',')
            header = []
            header = next(csv_reader)
            # FIXME!! Last line is NULL
            try:
                # format of log entry is: date,time,cpu_temp,cpu_load,total_mem,free_mem,used_mem
                for row in csv_reader:
                    if flight_date is None:
                        flight_date = row[0]

                    date_str = '{} {}'.format(row[0], row[1])
                    date_time = datetime.strptime(date_str, '%d-%m-%Y %H:%M:%S')
                    dt.append(date_time)
                    #print(datetime.combine(datetime.date(row[0]), datetime.time(row[1])))
                    cpu_temp.append(float(row[2]))
                    cpu_load.append(float(row[3]))
                    total = float(row[4])
                    used = float(row[6])
                    percent = (used * 100) / total
                    mem_used.append(percent)
                    #print(date_str, cpu_load[-1], cpu_temp[-1], mem_used[-1])
            except Exception as e:
                #print(e)
                pass
            create_plot(dt, cpu_temp, sys_id, 'CPU Temperature', '\u00B0C')
            create_plot(dt, cpu_load, sys_id, 'CPU Load', '%')
            create_plot(dt, mem_used, sys_id, 'Memory Usage', '%')

def create_plot(x:List[str], y:List[float], sys_id:int, title:str, ylabel:str):
    '''Create and save plot'''

    fig, ax = plt.subplots()
    ax.plot(x, y)
    plt.xticks(rotation=45)
    ax.xaxis.set_major_formatter(DateFormatter('%H:%M:%S'))
    ax.set_title(f'UAV-{sys_id} Smartlink {title}')
    ax.set_ylabel(ylabel, rotation=0)
    ax.set_ylim(ymin=0, ymax=100)
    _fname = title.lower().replace(" ", "_")
    filename = f'sl-{sys_id}_{_fname}.png'
    plt.savefig(filename, bbox_inches='tight')
    images.append(filename)


def create_first_page(c: canvas.Canvas):
    '''Create the first page of pdf report'''
    c.saveState()
    add_header_footer(c, 0, header=True, footer=False)

    width, height = A4
    title_fonts = ('Helvetica-Bold', 24)
    c.setFillColor(colors.black)
    c.setFont(*title_fonts)

    title = 'Smartlink System Profile'
    txt_width = stringWidth(title, *title_fonts)
    c.drawString((width-txt_width)/2, height*.5, title)

    fonts = ('Times-Bold', 14)
    c.setFont(*fonts)
    dt = f'Flight Date: {flight_date}'
    txt_width = c.stringWidth(dt, *fonts)
    c.drawString((width-txt_width)/2, (height/2)-20, dt)

    c.restoreState()

def add_header_footer(c: canvas.Canvas, page_no: int, header:bool=True, footer:bool= True):
    '''Add a header and footer to each new page in PDF document'''
    c.saveState()
    width, height = A4

    if header:
        c.setStrokeColor(colors.black)
        c.drawImage('report_logo.png', width - (2.0 * inch), height - (.5 * inch), 1.8*inch, .2*inch, preserveAspectRatio=False)

    if footer:
        c.setStrokeColor(colors.black)
        c.line(.3*inch, .7*inch, width - (.3*inch), .7*inch)
        c.setFont('Times-Roman', 12)
        c.setFillColor(colors.black)
        c.drawCentredString(width/2 - (.1*inch), .5*inch, f'Page {page_no}')
    c.restoreState()

def add_charts(c: canvas.Canvas):
    '''Add charts to pdf document'''
    width, height = A4
    x = 2*inch
    for i in range(len(images)):
        if i % 2 == 0:
            c.showPage()
            add_header_footer(c, (i//2)+1)
            y = height * .5
        else:
            y = inch
        c.drawImage(images[i], x, y, 5*inch, 5*inch, preserveAspectRatio=True)

def generate_report():
    '''Create a PDF document'''
    global flight_date
    pdf_filename = f'smartlink_sys_profile_{flight_date}.pdf'
    _canvas = canvas.Canvas(pdf_filename, pagesize=A4)
    create_first_page(_canvas)
    add_charts(_canvas)
    _canvas.save()

def delete_images():
    '''Delete image files generated by the script'''
    global images

    for i in range(len(images)):
        os.remove(images[i])


# global variables
flight_date = None
images = []

if __name__ == '__main__':

    if len(sys.argv) < 2:
        print("Usage: plot_tool.py file1 [file2 ...]")
        exit()

    parse_files()
    generate_report()
    delete_images()
